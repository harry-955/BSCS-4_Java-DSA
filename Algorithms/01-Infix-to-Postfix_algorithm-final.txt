FUNCTION SUB-ALGORITHM TO CONVERT INPUT INFIX EXPRESSION TO POSTFIX

Input: Infix expression as a string

Output: Postfix expression as a string

POSTFIX(Infix)

1. Initialize Size ← (length of Infix)/2
2. Initialize stack[Size] 	[an empty stack of size length of InfixExpression/2 to store operators]
3. Initialize Postfix ← "" 	[an empty string to store the postfix expression later]
4. REPEAT FOR each character 'char' in the Infix

	[Case 1: If char is any operator]

	A. IF char = '+' OR char = '-' OR char = '*' OR char = '/' OR char = '^' THEN
		i. IF char = '^' THEN
				a. stack.push(char)
		   ELSE 
				a.	REPEAT WHILE NOT stack.isEmpty() AND stack.peek()<> '(' AND precedence(char) <= precedence(stack.peek())
	    				a1. Postfix ← Postfix + stack.pop()
	    			WEND
				b.	stack.push(char) 	[If stack has gone empty or precedence of char is high]
		   ENDIF	[End of Inner IF]
	
	[Case 2: If char is '(']

    ELSE IF char = '(' THEN
        	i. stack.push(char)

	[Case 3: If char is ')' ]

    ELSE IF char = ')' THEN
       		i.	WHILE stack.peek() <> '('
            		a. Postfix ← Postfix + stack.pop()
            	WEND
        	ii. stack.pop()		[Pop the open parenthesis '(' from the stack.]
    
    [Case 4: If char is an operand]
    
    ELSE 
        i. Postfix ← Postfix + char
    ENDIF	[End of Outer IF]
   NEXT	[END OF FOR Loop]
    
5. REPEAT WHILE NOT stack.isEmpty()
    	a. Postfix ← Postfix + stack.pop()
   WEND
6. RETURN Postfix

END of POSTFIX(Infix)


